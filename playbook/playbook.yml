# when to improve this script look here : https://github.com/geerlingguy/ansible-role-php-versions
- hosts: all
  vars:
    drupal_database: "ccnavigator"
    drupal_database_user: "drupal"
    drupal_database_pass: "drupal"
  gather_facts: no #retrieves some variables like ansible_hostname, this fails on first provision, but works when we skip it and install some things and try again...
  become: true
  pre_tasks:
    - name: Install Python for Ansible
      raw: apt-get update && apt-get -y install python-simplejson
    - setup: # aka gather_facts, now we have pythin we can gather facts
    - debug: msg='ansible_hostname {{ ansible_hostname }}'
  # install: apache, php, mariadb, bindings, composer, drush, drupal
  # configure: apache, mariadb, drupal
  tasks:
    - name: Install git
      apt: name=git-all
    - name: Install unzip
      apt: name=unzip
    - name: Update the server
      apt: update_cache=yes
    - name: Install Apache
      apt: name=apache2 state=present update_cache=yes
    # Debian-specific tasks Ondrej Sury php repo.
    - name: Add dependencies for PHP versions (Debian).
      apt:
        name:
          - apt-transport-https
          - ca-certificates
        state: present
      when: ansible_distribution == "Debian"
    - name: Add Ondrej Sury's apt key (Debian).
      apt_key:
        url: https://packages.sury.org/php/apt.gpg
        state: present
      when: ansible_distribution == "Debian"
    - name: Add Ondrej Sury's repo (Debian).
      apt_repository:
        repo: "deb https://packages.sury.org/php/ {{ ansible_distribution_release }} main"
        state: present
      register: php_ondrej_debian_repo
      when: ansible_distribution == "Debian"
    - name: Update apt caches after repo is added (Debian).
      apt: update_cache=true
    - name: Install PHP 7.2
      apt: name=php7.2
    - name: Install php mbstring extension
      apt: name=php7.2-mbstring
    - name: Install mod_rewrite for PHP
      apt: name=libapache2-mod-php7.2
    - name: Enable mod_rewrite
      apache2_module:
        state: present
        name: rewrite
    - name: Enable mod_headers
      apache2_module:
        state: present
        name: headers
    - name: Install php-xml required for drupal
      apt: name=php7.2-xml
    - name: Install php-gd required for drupal
      apt: name=php7.2-gd
    - name: Install php-curl required for drupal
      apt: name=php7.2-curl
    - name: Install MariaDB server
      apt: name=mariadb-server
    - name: Install MariaDB client
      apt: name=mariadb-client
    - name: Start Mysql Service
      service: name=mysql state=started enabled=true
    - name: Install PHP MySQL binding
      apt: name=php-mysql
    - name: Install python Mysql package #required for mysql_db tasks
      apt: name=python-mysqldb state=present
    # like mysql_secure_installation, root can access without pw (requires sudo anyway), remove anonymous accounts
    - name: Delete anonymous MySQL server user
      mysql_user:
        user=""
        host="{{ item }}"
        state="absent"
      with_items:
        - ""
        - "{{ ansible_hostname }}"
        - localhost
    # remove test db
    - name: Remove the MySQL test database
      mysql_db:
        db=test
        state=absent
    # mysql default only listens at localhost (which is good), but we should find a way to check that, maybe using sudo /usr/sbin/mysqld --verbose --help
    - name: Show mysql maria db conf
      shell: /usr/sbin/mysqld --verbose --help | grep bind-address
      register: conf
    - debug: var=conf.stdout_lines
    # create db
    - name: Create database
      mysql_db: name={{ drupal_database }}
                state=present
                collation=utf8_general_ci
    # create user and grant user on newly created db
    - name: Create db user
      mysql_user: name={{ drupal_database_user }}
                  password={{ drupal_database_pass }}
                  host=localhost
                  priv={{ drupal_database }}.*:ALL,GRANT
                  host='localhost'
                  state=present
    # composer download
    - name: Download composer
      get_url:
        url: https://getcomposer.org/installer
        dest: /tmp/installer
      tags: composer
    # composer install
    - name: Install composer
      shell: cat /tmp/installer | php -- --install-dir=/usr/local/bin
      args:
        creates: /usr/local/bin/composer
      tags: composer
    - name: rename composer.phar to composer
      shell: mv /usr/local/bin/composer.phar /usr/local/bin/composer
      args:
        creates: /usr/local/bin/composer
      tags: composer
    - name: Make composer executable
      file:
        path: /usr/local/bin/composer
        mode: a+x
        state: file
      tags: composer
    #copy the apache config
    #- name: Apache config
    #  copy: src=config/apache2.conf dest=/etc/apache2/apache2.conf
    #- name: Restart apache
    #  service: name=apache2 state=restarted
